volumes:
  lavinmq:
    external: true
  postgres:
    external: true
  caddy_data:
    external: true
  bot_data:
    external: true
  caddy_config: null

services:
  postgres:
    image: postgres
    restart: unless-stopped
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: admin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d admin" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_interval: 5s
  lavinmq:
    image: cloudamqp/lavinmq
    restart: unless-stopped
    volumes:
      - lavinmq:/var/lib/lavinmq
    healthcheck:
      test: ["CMD", "/usr/bin/lavinmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_interval: 5s
  strapi:
    build: ../../admin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      lavinmq:
        condition: service_healthy
    environment:
      APP_KEYS: ${STRAPI_APP_KEYS}
      API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${STRAPI_TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${STRAPI_JWT_SECRET}
      PUBLIC_URL: ${PUBLIC_URL}
      # Database
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: admin
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: admin
      DATABASE_SSL: false
      CLOUDAMQP_URL: amqp://guest:guest@lavinmq
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 -S --spider 127.0.0.1:1337/_health || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_interval: 5s
  bot:
    build: ../../bot
    restart: unless-stopped
    depends_on:
      strapi:
        condition: service_healthy
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      API_TOKEN: ${API_TOKEN}
      API_URL: http://strapi:1337/api
      AMQP_URL: amqp://guest:guest@lavinmq
      CHAT_ID: ${CHAT_ID}
      PUBLIC_URL: ${PUBLIC_URL}
      ICAL_TOKEN: ${ICAL_TOKEN}
      TZ: Europe/Moscow
    volumes:
      - bot_data:/opt/app/data
  caddy:
    image: caddy
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    environment:
      PUBLIC_URL: ${PUBLIC_URL}
      ICAL_TOKEN: ${ICAL_TOKEN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

